
内核参数：（关键词：Linux内核TCP/IP，TCP优化，sysctl，sysctl.conf）
fs.file-max = 65535                    #单个进程允许打开最大文件数
net.ipv4.ip_forward = 1                #转发
net.ipv4.tcp_fin_timeout = 200         #保持在FIN-WAIT-2状态的时间，使系统可以处理更多的连接。此参数                                         值为整数，单位为秒。
net.ipv4.tcp_tw_reuse = 1              #开启重用，允许将TIME_WAIT socket用于新的TCP连接。默认为0，
                                       表示关闭。
net.ipv4.tcp_tw_recycle = 1            #开启TCP连接中TIME_WAIT socket的快速回收。默认值为0，表示关闭
net.ipv4.tcp_syncookies = 1            #开启SYN cookie，出现SYN等待队列溢出时启用cookie处理，
                                       防范少量的SYN攻击。默认为0，表示关闭。
net.ipv4.tcp_keepalive_time = 600      #keepalived启用时TCP发送keepalived消息的拼度。默认位2小时。
net.ipv4.tcp_keepalive_probes = 5      #TCP发送keepalive探测以确定该连接已经断开的次数。
                                       根据情形也可以适当地缩短此值。
net.ipv4.tcp_keepalive_intvl = 15      #探测消息发送的频率，乘以tcp_keepalive_probes就得到对于
                                       从开始探测以来没有响应的连接杀除的时间。默认值为75秒，也就是没                                        有活动的连接将在大约11分钟以后将被丢弃。对于普通应用来说,这个                                         值有一些偏大,可以根据需要改小.特别是web类服务器需要改小该值。
net.ipv4.ip_local_port_range = 1024 65000 #指定外部连接的端口范围。默认值为32768 61000。
net.ipv4.tcp_max_syn_backlog = 262144  #表示SYN队列的长度，预设为1024，这里设置队列长度为262 144，
                                       以容纳更多的等待连接。
net.ipv4.tcp_max_tw_buckets =5000      #系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数值将
                                       立刻被清楚并输出警告信息。默认值为180000。对于squid来说效果不                                         是很大，但可以控制TIME_WAIT套接字最大值，避免squid服务器被拖死 
net.ipv4.tcp_syn_retries = 1           #表示在内核放弃建立连接之前发送SYN包的数量。
net.ipv4.tcp_synack_retries = 1        #设置内核放弃连接之前发送SYN+ACK包的数量。
net.core.somaxconn = 16384             #定义了系统中每一个端口最大的监听队列的长度, 对于一个经常处理
                                       新连接的高负载 web服务环境来说，默认值为128，偏小。
net.core.netdev_max_backlog = 16384    #表示当在每个网络接口接收数据包的速率比内核处理这些包的速率快                                       时，允许发送到队列的数据包的最大数量。
net.ipv4.tcp_max_orphans = 16384       #表示系统中最多有多少TCP套接字不被关联到任何一个用户文件句柄上
                                       如果超过这里设置的数字，连接就会复位并输出警告信息。这个限制仅                                       仅是为了防止简单的DoS攻击。此值不能太小。

Nginx编译
 ./configure --prefix=/opt/apps/nginx  
--with-http_stub_status_module 
--with-http_geoip_module           编译 GeoIP 组件，额外下载，同时需要相应的ip数据包*.dat  在配置文件                                   加一个if，可拦截指定国家ip
--with-http_realip_module          意义在于能够使得后台服务器记录原始客户端的IP地址
--with-http_gzip_static_module     事先压好.gz文件，而不是让nginx在访问的时候现压缩从而节省cpu
--with-ipv6 --user=swadmin         ipv6模块
--group=swadmin         


zlib是提供数据压缩之用的库       

zabbix依赖包
yum -y install 
php-mysql     #php连接mysql插件
php-bcmath    #精确计算浮点数
php-mbstring  #PHP字符串mbstring，支持多字节字符
php-xml       #正确解读xml配置文件，xml可扩展标记语言,一种用于标记电子文件使其具有结构性的标记语言
php-ldap      #支持LDAP目录树，层次结构来组织数据
php-pear      # PHP扩展与应用库，PHP扩展及应用的一个代码仓库
php-xmlrpc    #xml rpc是使用http协议做为传输协议的rpc机制，本地的机器上调用远端机器上的一个过程（方法               的技术，这个过程也被大家称为“分布式计算”，是为了提高各个分立机器的“互操作性”而发明出               来的技术
curl          #利用URL语法在命令行下工作的文件传输工具，支持上传下载
net-snmp      #SNMP：“简单网络管理协议”
net-snmp-devel #NET-SNMP项目包括各种SNMP工具：可扩展代理，SNMP库
gcc  c++ httpd 
perl-DBI      #perl的数据库独立接口，可连接数据库
autoconf      #Autoconf产生的配置脚本通常叫做configure
httpd-manual  #提供apache的使用文档
mod_ssl       #modssl以openssl 的工具箱为基础 专门为apache webserver 提供密码保护，ssl（安全套阶层）                和 tls(传输套件层安全)的 协议
mod_perl      #将 perl 程序语言封装在 Apache web 服务器内，在 mod_perl 下，CGI 脚本比平常运行快50倍
              可将数据库与web服务器集成在一起，用Perl编写Apache模块，Apache的配置文件里面插入 Perl 代               码，甚至以 server-side include 方式使用 Perl，对perl来说，apache更是一个平台
mod_auth_mysql   #允许使用存储在MySQL数据库中的用户和组数据进行身份验证 
mysql-connector-odbc  #ODBC：开放数据库连接是为解决异构数据库间的数据共享而产生的
mysql-devel      #开发使用的库
libdbi-dbd-mysql #用于libdbi的MySQL插件，libdbi在C中实现了一个与数据库无关的抽象层，类似于Perl中的DBI                  / DBD层。编写一组通用代码，程序员可以使用此框架利用多个数据库的强大功能和多个同步数据                 库连接。
crul-devel       #PHP支持curl ，libcurl的头文件(函数库)
openssl-devel    #openssl的库文件  开发调用的时候需要安装
pcre-devel       #pcre开发环境
libjpeg-devel    #libjpeg是一个免费的库，具有处理JPEG图像数据格式的功能。
libxml2-devel    #可用于开发XML应用程序的库，包含文件,允许读取，修改和编写XML和HTML文件,
libpng-devel 
libevent         #Libevent 是一个用C语言编写的、轻量级的开源高性能事件通知库，专注于网络
                 轻量易读，支持多种 I/O 多路复用，定时，信号等，注册事件优先。
libevent-devel 
libcurl          #libcurl是一个免费且易于使用的客户端URL传输库,上传，下载，验证
libcurl-devel  
libaio           #本机一个异步非阻塞接口,它提供了以异步非阻塞方式来读写文件的方式,读写效率比较高 

PHP编译（zabbix服务端部署）
./configure --prefix=/opt/apps/php --enable-fpm      php支持php-fpm
--enable-mbstring     支持多字节字符
--enable-bcmath       支持浮点数计算
--enable-sockets      启用socket，客户端和服务端能建立会话
--enable-mysqlnd      由PHP源码提供的mysql驱动连接代码(php专用)，替代MySQL自带的libmysql
--enable-gd-native-ttf   图像生成和处理，最新版本被删除了
--with-config-file-path=/opt/apps/php/etc 
--with-mysql=/opt/apps/mysql/ 
--with-mysqli=/opt/apps/mysql/bin/mysql_config     
--with-mysql-sock=/opt/data/data_3306/mysql.sock    mysql的主机和客户机在同一host
--with-gd 
--with-gettext        gettext是GNU国际化与本地化（i18n）函数库。常被用于编写多语言程序
--with-jpeg-dir       获得JPEG支持
--with-freetype-dir=/opt/apps/freetype/

php-fpm进程管理器优化：vim php-fpm.conf
pm = dynamic        #动态，一般来说一台服务器正常情况下每一个php-cgi所耗费的内存在20M左右
pm.max_children：   #静态方式下开启的php-fpm进程数量，在动态方式下他限定php-fpm的最大进程数（这里要注                    意pm.max_spare_servers的值只能小于等于pm.max_children）
pm.start_servers：  #动态方式下的起始php-fpm进程数量。
pm.min_spare_servers：#动态方式空闲状态下的最小php-fpm进程数量。
pm.max_spare_servers：#动态方式空闲状态下的最大php-fpm进程数量。如果dm设置为static，那么其实只有pm.max_children     #这个参数生效。系统会开启参数设置数量的php-fpm进程。php-fpm一个进程大概会占20m-                    40m的内存，所以他的数字大小的设置要根据你的物理内存的大小来设置，还要注意到其他的                     内存占用，如数据库，系统进程等，来确定以上4个参数的设定值！































