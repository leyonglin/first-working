
01： 对象和类

面向过程编程：基本单位是函数
面向对象编程object-oriented programming：一种将一切看作物体的思维
面向对象：把一切看成对象(实例)，用各种对象之间的关系来描述事务
	对象的特征：1.对象有很多的属性    2.对象有很多的行为(动作)
类：拥有相同属性和行为的对象分为一组，即为一个类。是用来描述对象的工具，用类可以创建此类的对象(实例)
	类的创建语句class语句
		语法：
			class 类名(继承列表):
				'''文档字符串'''
				实例方法定义
				类变量定义
				类方法定义(@classmethod)
				静态方法定义(@staticmethod)
		作用：1.创建一个类   2.用于描述对象的行为和属性    3.用于创建此类的一个或多个对象(实例)
			说明：1.类名必须为标识符(建议首字母大写)    2.类名实质上就是变量，它绑定一个类
		
	构造函数
		构造函数调用表达式：
			类名([创建传参列表])
		作用：创建这个类的实例对象，并返回此实例对象的引用关系
		说明：实例有自己的作用域和名字空间，可以为该实例添加实例变量(属性)
			  实例可以调用类方法和实例方法
			  实例可以访问类变量和实例变量
	实例方法(method)
		语法：
			class 类名(继承列表):
				def 实例方法名(self, 形参名1, 形参名2, ...):
					'方法文档字符串'
					语句块
		作用：用于描述一个对象的行为，让此类型的全部对象都拥有相同的行为
		说明：实例方法实质是函数，是定义在类内的函数
			  实例方法至少有一个形参，第一个形参用来绑定调用这个方法的实例，一般命名为'self'
	实例方法的调用语句：
		实例.实例方法名(调用传参)     #实例方法名 = 类内的函数名
		或
		类名.实例方法名(实例,调用传参)
	实例属性attribute(实例变量)：每个实例可以有自己的变量用来保存对象自己的数据，称为实例变量(属性)
		语法：
			实例.属性名
		赋值规则同变量的赋值规则：
			1.首次为属性赋值则创建此属性    
			2.再次为属性赋值则改变属性的绑定关系
		作用：记录每个对象自身的数据
		实例：
			class Dog:                                                   #创建类
				def eat(self, food):                                     #创建实例方法(共性),self被赋值为实例对象
					print(self.color, '的', self.kinds, '正在吃', food)   #可以调用实例属性
					self.food=food                                       #保存对象自己的数据(个性)，该属性由dog1.eat('骨头') 执行后赋值的，和dog1.kinds='二哈'作用是一样的
				def show_food(self):
					# print(self.color, '的', self.kinds, '正在吃1', food) #会失败，显示food未定义。kinds和color不会报错，在外面已经进行实例属性赋值了  
					print(self.color, '的', self.kinds, '上次吃的是', self.food)
			
			dog1=Dog()                                                   #创建实例对象
			dog1.kinds='二哈'                                            #实例属性赋值
			dog1.color='白色'                                            #实例属性赋值
			print(dog1.color, '的', dog1.kinds)                          
			dog1.eat('骨头')                                             #传递参数，并通过self.food=food 进行实例属性赋值       
			dog1.show_food()                                             

	del 语句：可以删除对象(实例)的属性
		语法：del 对象.实例变量名
		1.删除变量 2.删除列表的元素   3.删除字典的键   4.删除对象的属性

	初始化方法：对新创建的对象添加属性
		语法格式：
			class 类名(继承列表):
				def __init__(self, [形参列表]):     #color为形参
					语句块                          #self.color=color初始化实例赋值
		说明：
			1.初始化方法名必须为'__init__'不可改变
			2.初始化方法会在构造函数创建实例后自动调用，且将实例自身通过第一个参数self传入__init__方法
			3.构造函数的实参将通过__init__方法的参数列表传入到__init__方法中
			4.实例化方法内如果需要return语句返回，则只能返回None
	析构方法：
		class 类名(继承列表):
			def __def__(self):
				语句块
		析构方法在对象被销毁(实例变量绑定关系改变或实例变量被删除或程序退出)时被自动调用，可以释放资源(python语言建议不要在对象销毁时做任何事情)
					
	预置实例属性：
		__dict__属性 ：绑定一个存储此实例自身变量字典(存放实例属性)

		__class__属性：绑定创建此实例的类
			作用：可以借助此属性来访问创建此实例的类

2-02:43









02： 函数重写 str/repr函数重写示例
03： 继承(inheritance) 和 派生(derived) 封装 多态
04： 异常高级 运算符重载