

01： Python工具使用 WEB与服务器、框架 MVC 与 MTV 


Django：开源框架，采用python语言编写
	自带强大的后台管理系统
官方参考文档：https://docs.djangoproject.com/zh-hans/2.2/
	中文文档：搜索：djangobook

MTV：
	M：models
	T：templates
	V：views



在线安装：pip3 install django==1.11.8
离线安装：pip3 install Django-1.11.16.tar.gz

1.Django框架的使用
		1.创建项目
			使用django-admin 创建django项目
			语法：django-admin startproject 项目名称(TestDjango)
	
	manage.py ：一种命令行工具,在项目目录下，使用python3 manage.py 可以查看
		启动：python3 manage.py runserver 0.0.0.0:8000
				(./manage.py runserver 这样启动需要修改manage.py 的python解释器版本)
			在项目目录下，与项目名称一致的目录称为主目录
	__init__.py ：初始化文件，让 Python 把该目录当成一个开发包 (即一组模块)所需的文件
	urls.py：Django项目的URL设置。 可视其为你的django网站的目录
	wsgi.py: web server gateway Interface
	settings.py ：该 Django 项目的设置或配置
		BASE_DIR:项目路径
		DEBUG: True则修改配置后会重启
		ALLOWED_HOSTS：允许访问本项目的地址列表(默认127.0.0.1),推荐写['*'],同时启动时需要指定地址和端口
		INSTALLED_APPS：指定已安装的应用，有自定义的应用的话，需要在此注册
		MIDDLEWARE：中间件，有自定义的中间件需要在此注册
		ROOT_URLCONF：路由配置文件
		TEMPLATES：配置模板的信息
		DATABASES：配置数据库的信息
		LANGUAGE_CODE：语言设置(中文："zh-Hans")
		TIME_ZONE:时区(中国时区："Asia/Shanghai")
2.url的使用
	1.urls.py
		默认是在主目录中，主路由配置文件，会包含最基本的地址映射，并且每个地址访问都必须要先经过该文件
		作用：通过urls中定义好的地址找到对应的视图处理函数
	2.url()的语法
		作用，为了匹配用户的访问路径
			from django.conf.urls import url
			url(regex,views,kwargs=None,name=None)
				1.regex:允许是正则表达式，匹配请求的url
				2.views:地址匹配后要执行操作的视图处理函数
				3.kwargs:字典，用来向views传参的，可以省略
				4.name:为url起别名，在地址反向解析时使用
	
配置应用：
	1.urls.py
	2.views.py(相同目录下创建自定义试图文件)
	通过url向视图传参
		1.使用正则表达式的子组传参，需要多个子组,中间用/隔开
		2.字典传参
			dic = {
				'name':'sasuke',
				'age':18
				}
django中的应用
	应用就是网站中的一个独立的程序模块
	在django中，主目录一般不处理具体的请求，主目录一般处理项目的初始化操作以及请求的分发(分布式请求处理)，而具体的请求是由各个应用去处理
	创建应用：
		1.指令:
			python3 manage.py startapp 应用名称
		2.在setting.py
			INSTALLED_APPS中追加应用的名称来表示注册应用
	应用的结构组成：
		1.migrations文件夹
			存放数据库的中间文件
		2.__init__.py 
			应用的初始化文件
		3.admin.py
			应用的后台管理配置文件
		4.app.py
			应用的属性配置文件
		5.models.py
			Models与模型相关的映射文件
		6.tests.py
			应用的单元测试文件
		7.views.py
			定义视图处理函数的文件
	分布式路由系统：
		在每个应用中分别创建urls.py格式和主路由文件一样
		目的：为了处理各个应用中的请求路由
	
	访问路径为：host:port/apps/path
	
	
	
	
	

02： Django介绍 Django中的应用 模板的加载方式 

Django中的模板：templates
	1.模板就是要动态呈现给用户的网页
	  模板引擎是由Django自己提供的，而非Jinja2，与Flask语法稍微不同
	2.模板设置
		在setting.py中设置TEMPLATES变量
		1.BACKEND：指定使用的模板引擎
		2.DIRS：指定模板的存放目录
			1.DIRS=[os.path.join(BASE_DIR,'templates')],
				在项目的根目录的template目录中存放所有的模板
			2.DIRS=['index.temp','music.temp']
				在项目的index应用中的temp目录中存放模板及music应用中的temp目录中存放模板
		3.APP_DIRS:是否要自动搜索应用中的templates目录
		4.OPTIONS：额外配置
	3.模板的加载方式
		1.通过loader对象获取模板，再通过HttpResponse进行响应
			1.先导入loader
				from django.template import loader
			2.通过loader加载模板
				t = loader.get_template('模板名称')
				t：从Django中得到的模板对象
			3.将加载好的模板渲染成字符串,得到html
				html = t.render()
			4.通过HttpRequest将字符串进行响应并返回
				return HttpRequest(html)
		2.使用render直接加载并相应模板
			return render(request,'模板名称')
	4.模板的语法
		1.变量
			1.作用：将后端的数据传递到模板进行渲染
			2.允许作为变量的数据类型
				字符串，整数，列表，元组，字典，函数，对象
			3.变量的语法
				变量必须封装到字典中才能传递给模板
				dic = {
					'name':'王老师',
					'age':30,}				
				1.使用loader加载模板
					t = loader.get_template('模板名称')
					html = t.render(dic)
					return HttpRequest(html)
				2.使用render加载模板
					return render(request,'模板名称',dic)
			4.在模板中使用变量
				{{变量名}}
		2.标签
			1.作用：将服务器端的功能嵌入到模板中
			2.语法：官方文档：https://docs.djangoproject.com/en/1.11/ref/templates/builtins/
				{% 标签名 %}
					...
				{% end标签名 %}
				
				常用标签：在
					if 和 for
					内置变量：
						在循环中允许使用forloop内置变量来获取循环的信息
						forloop.counter
						forloop.revcounter
		3.过滤器:https://docs.djangoproject.com/en/2.2/ref/templates/builtins/#built-in-filter-reference
			在变量输出显示之前，对变量的数据进行筛选和过滤
			语法：{{变量|过滤器:参数}}
				{{value|upper}}
				{{value|lower}}
				{{value|add:num}}
				{{value|floatformat:n}}
				{{value|truncatechars:n}}
		4.静态文件：
			1.无需与服务器进行动态交互的文件
			2.在django的静态文件的处理
				在setting.py中设置有关静态文件的信息
				1.设置静态文件的访问路径
					在浏览器中通过那个地址能够找到静态文件
					STATIC_URL = '/static/'
				2.设置静态文件的存储路径
					指定静态文件要保存在服务器那个目录处
					STATICFILES_DIRS=(os.path.join(BASE_DIR,'static'),)
				3.静态文件目录的存放位置：
					1.在项目的根目录处创建一个static目录，用于保存静态文件
					2.每个应用中也可以创建一个static目录，用于保存静态文件
						访问路径:localhost:port/static/..
			3.访问静态文件
				1.直接访问静态文件
					<img src="static/images/jiayao.jpg">
				2.使用{% static %}
					1.使用之前需要通过{% load static %} 加载static
					2.使用静态资源时
						<img src="{% static 'images/jiayao.jpg'%}">
				
			




03： 模板中的语法（变量，标签，过滤器，静态文件，继承） ORM 创建和使用模型

模板的继承
	1.语法
		1.在父模板中
			必须标识出来哪些内容在子模版中允许被修改
			标签:
				{ % bloc 块名 % }
					... ...
				{ % endblock % }
				block作用：
					1.在父模板中没有任何影响，正常显示
					2.在子模版中，允许被修改，但如果不做任何修改，则显示父模板内容
		2.在子模版中
			1.指定继承自哪些父模板
				{% extends '父模板名称' %}
			2.通过black标签，改写属于自己的内容
				{% block 块名 %}
				{% endblock %}
			


2-00-00





04： 编写Models 数据的导入和导出及版本切换 通过模型增加、查询、修改、删除数
据










05： F()操作与Q()操作 用后台管理Models 一对多映射查询 













06： 多对多映射查询 HttpRequest使用 csrf跨站点攻击 










07： 使用 forms 模块 模板中解析 form 对象 forms高级处理 










08： cookies session会话















