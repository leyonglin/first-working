
01： JavaScript概述 JS基础语法 JS变量和常量

CSS布局方式
	1.布局：设置元素在网页中的排列方式及显示效果
	2.分类：
		1.标准流布局(文档流，普通流，静态流)
			默认的布局方式
			特点：将元素按照书写顺序及元素类型，从上至下，从左至右排列
		2.浮动布局
			设置元素浮动
				属性：float
				取值：left/right/none(默认值)
				浮动元素的特点：
					1.元素设置浮动（left/right），会脱离文档流，在文档中不再占位，后面正常的元素会向前占位，浮动元素会"漂浮"在文档流上方
					2.元素设置浮动，从当前所在(原始)文档中的位置脱流
					3.多个元素同时浮动，浮动元素会依次停靠在前一个浮动元素的边缘，中间没有缝隙
					4.浮动元素在父元素的尺寸范围内浮动，多个浮动元素无法保持并排，会自动换行，停靠在其它浮动元素的边缘
					5.任何元素只要设置浮动，就具有块元素的特征，可手动调整宽高
		3.浮动引发的特殊效果：
			文字环绕效果：
				浮动元素脱流，在文档中不占位，后面正常元素会向前占位，可能被浮动元素遮挡，但是浮动元素只会遮挡正常元素的尺寸区域，不会遮挡正常文本内容，文本会围绕在浮动元素周围显示
		4.元素浮动引起的问题：
			子元素如果全部设置浮动，在文档中不占位，父元素高度为0
				1.父元素的背景图片和背景颜色无法显示
				2.父元素后面的正常元素会上移，影响布局
			解决
				1.为父元素指定高度
				2.设置父元素 overflow:hidden;
				3.清除浮动的影响：
					属性：clear
					取值：
						left/right/both
						left：表示正常元素左边不允许出现浮动元素
					使用：
						解决父元素高度为0的问题
							1.为父元素末尾添加空的块元素
							2.为空的块元素设置clear:both;
		5.定位布局：
			1.定位布局：通过调整元素的位置，实现页面布局
			2.属性：position
				取值：
					1.static:默认值，使用文档流布局
					2.relative：相对定位
					3.absolute：绝对定位
					4.fixed：固定定位
				注意：只有元素设置position属性为relative/absolute/fixed三者之一，才认为元素是“已定位的元素”
			3.偏移属性：
				使用top/bottom/left/right偏移属性
				调整已定位元素的位置
				1.top：取像素值，可正(向下移动)可负(向上移动)
				2.bottom：正值表示元素向上移动，负值向下
				3.left：正值向右移动
				4.right：正值向左
			4.分类：
				1.相对定位 position：relative
					元素设置相对定位之后，可以使用偏移属性调整元素位置
					相对定位的元素是参照元素在文档中的原始位置进行偏移
					特点：
						相对定位的元素不会脱离文档流
						在文档中始终保留它的原始位置
				2.绝对定位：position：absolute	
					绝对定位的元素会脱离文档流，类似于浮动(不占位)
					绝对定位的元素参照一个
						离他最近的
						已定位(设置了position)的祖先元素进行偏移，
						如果没有，会参照浏览器的窗口的(0,0)点偏移
					使用：
						采用"父相子绝"的方式实现元素的绝对定位
						父元素采用相对定位，子元素使用绝对定位，
						实现子元素参照父元素的(0,0)点偏移
				3.固定定位：position：fixed
					特点：
						1.固定定位的元素，永远都参照浏览器窗口进行偏移
						2.固定定位的元素，会被定位在窗口的某个位置，不会跟随页面滚动而滚动
		6.调整已定位元素的堆叠次序：
			属性：z-index
			取值：无单位的数值，默认为0，数值越大，元素越靠上显示
			注意：	
				1.z-index属性只能在已定位的元素中使用
				2.兄弟元素之间可以通过z-index的数值大小来调整堆叠次序
				3.父子元素子元素永远在上，无法通过z-index来调整堆叠次序
				4.兄弟元素的z-index取值相同，后来者居上
	2.元素显示效果
		1.display：
		2.visibility：
		3.透明度设置
			1.属性：opacity  设置元素透明度
			2.取值：0(透明) - 1(不透明)
			3.注意：
				1.元素使用opacity设置半透明。所有显示的内容(背景颜色，文本颜色等)都会呈现半透明效果
				2.opacity是对元素整体透明度的设置，包含元素自身和内部的子元素
				3.子元素同时透明度，最终透明度值是在父元素opacity取值的基础上再次进行透明度设置
				4.行内块元素的垂直对齐方式
					行内块元素：img  input  button
					属性：vertical-align
					取值：top\middle\bottom
					作用：调整行内块元素左右元素与其自身的垂直对齐方式
				5.设置鼠标形状
					属性：cursor
					取值：
						1.default 默认值
						2.pointer 鼠标在元素上展现为手指的样式
						3.text    鼠标展示为"I"，表示普通文本info
						4.crosshair  鼠标展示为"+"
	3.列表相关属性
		列表自带内外边距和项目符号
		1.list-style-type
			设置项目符号
			取值：
				1.none：取消项目符号，最常用
				2.disc：实心圆点
				3.circle 空心圆点
				4.square 实心方块
		2.list-style-image
			指定图片作为项目符号
			取值：url()
		3.list-style-position
			指定项目符号的显示位置
			默认项目符号显示在内容外部，在左边的padding中展现
			1.outside：默认值
			2.inside 设置项目符号显示在内容区域
		4属性简写：
			属性：list-style
			取值：type/image position
			常用：
				list-style:none
					取消项目符号
				
	

	

02： 数据类型 运算符 流程控制 


html的登录/注册代码









03： 分支结构 循环结构 函数 

1.JS组成
	1.ECMAcript - JS的核心语法
	2.内置对象 - BOM DOM 
		BOM：Browser Object Model 浏览器对象模型，主要提供一组操作浏览器的方法
		DOM：Document Object Model 文档对象模型，提供一组操作文档的方法
	3.JS自定义对象	
2.JS引入
	1.元素绑定
		将JS代码以事件的形式绑定在元素上
		事件：用户行为触发的操作(鼠标操作，键盘操作)
			eg:<h1 onclick="alert('弹窗显示文本');">点击</h1>
	2.文档内嵌
		使用<script></script>,在标签中书写JS代码
			et : <script>alert("文档内嵌")；</script>
		注意：脚本标签可以书写在任意位置，但是位置会影响执行效果(阻塞)
	3.外部JS文件
		创建.js文件，在文件中书写JS代码，
		使用<script src=""></script>标签在文档中引入
		如果脚本标签做引入操作，那么标签内不能再书写JS代码
	4.常用JS语句
		1.alert():以警告框的形式提示信息
		2.prompt():接收用户输入的弹框，输入结果会以函数返回的形式给出(阻塞)
		3.console.log();在控制台输出，常用于调试（会自动换行）
		4.document.write();在网页中输出
		注意：
			1.document.write()方法会根据当前的书写位置在网页中插入内容
			2.如果以"元素绑定"是将的方式在网页中写入内容，会清空当前页，只显示写入内容(再打开一个文档流)
			3.使用document.write()方法写入内容，可以识别HTML标签
3.JS基础语法
	1.js代码是由语句组成的，每一条语句以分号结尾；
    2.语句是由关键字，运算符，表达式组成的；
	3.JS代码严格区分大小写
	4.所有的标点符号，都是英文的
	5.JS中的注释
		// 					 单行注释
		/* 注释内容 */  	 多行注释
5.JS中的变量与常量
	1.变量：
		1.创建变量
			1.先声明后赋值
				使用var关键字进行变量声明，使用=进行变量的赋值，自定义变量名
				var a,b,c;
		2.声明的同时赋值
			var name="lin",age=20;
		3.命名规范：
			字母下划线数字和$组成，不能以数字开头,见名知意
			避免与关键字冲突，name var new for if do while function class break switch
			严格区分大小写，多单词组成变量名，采用小驼峰标识userName
		注意：	
			1.变量声明可以省略关键字var(不推荐)，直接使用变量名赋值
			2.变量如果只声明未赋值，默认值为undefined
	2.常量：
		变量可以在程序任何地方修改
		常量一经定义就不能更改
		1.创建
			使用const关键字创建常量，声明的同时必须赋值
		2.语法规范
			常量采用全大写的形式
		注意：
			1.小数在计算机的存储中时不精确的，存在误差
			2.指定保留小数位
				方法: toFixed(n); n表示要保留的位数
6.JS中的数据类型

  判断数据类型：typeof
  
	1.简单数据类型(基础)
		1.number 类型
			数值类型，包含整数和小数
			整数在内存中占用4个字节(32位)   小数占8个字节(64位)
			1.整数可以使用十进制，八进制，十六进制表示整数
				1.八进制：以0(数字)开头
					8为基数，取值0-7，逢8进1
				2.十六进制：以0x为前缀	
					取值0-9，a-f
				注意：不管是哪一种进制，在控制台都会以十进制显示	
			2.小数/浮点数
		2.string类型：
			1.JS中字符串使用引号引起来，单双引号都可以
			2.字符串中每个字符都有对应的Unicode码值
				1.查看字符的Unicode码
					方法： charCodeAt(index)
					字符串中每个字符都对应有一个下标，从0开始
				2.Unicode		
					编码中前128位与ASC码值一致
					字符转换成十六进制：r = r.toString(16)
				3.将中文的Unicode码值转换成字符，需要先将码值转换成16进制，再进行汉字字符的转换
					var s = "\u5f20";
				4.中文范围
					"\u4e00" ~ "\u9fa5"
				5.转义字符
					\n    \t    \"    \'    \\
		3.boolean:布尔类型
			用来表示真或假
				布尔类型表示真或加，是可以参与数学运算的
		4.undifined类型
			1.变量声明未赋值时
			2.如果访问对象不存在的属性时，
		5.null类型
			空类型
		
	2.复杂数据类型(引用)
		数组   函数  对象

	数据类型转换：
		相同数据类型的变量进行运算时，保持数据类型一致
		特殊：
			1.隐式类型转换(自动转换)
				1.number + string    当字符串与其他类型相加时，+表示字符串的拼接
			2.boolean + string
				将布尔类型转换成字符串进行拼接
			3.number + Boolean
				将布尔类型转换为数字进行数学运算
		强制类型转换
			1.toString()
				将任意非字符串类型的数据转换为字符串类型，并返回转换后的结果
			2.Number()
				将数字字符串或者布尔值转换为number类型，字符串包含非数字类型，转换失败并返回NaN
			3.parseInt()
				解析字符串中的数字(返回结果是整数)，只解析字符串开头中的数字，不是以数字开头的字符串，返回NaN
				不是字符串类型，会先转换成字符串toString再进行解析
			4.parseFloat()
				解析结果包含小数部分
				如果字符串中出现指数计数法表示的小数"1.5e3"，都视为小数

7.运算符
	1.赋值运算符
		=
	2.算术运算符
		1.+ - * / %   
		2.++  --   #自增和自减
			自增和自减在单独与变量结合时，放前放后都行  n++ == ++n
			与其它运算符结合使用，要区分前缀和后缀  
				后缀：r = n ++  --> 先将n赋值给r，n再自增1
				前缀：r = ++ n  --> n先自增，再赋值给r
文档：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators
	3.关系运算
		> <  =
	4.逻辑运算
	 &&  ||  !





04： 数组 String (两个视频顺序颠倒)


位运算符
	程序中的数据在计算机中都是以二进制形式存储的，位运算实际上是对二进制的每一位进行操作
	1. 按位与：   &       都为1时，结果位才为1
		常用于判断整数的奇偶，将一个操作数与1做位与，结果为1.该操作数为奇数，结果为0，该操作数为偶数
	2.按位或：    |       有一位为1则为1
	3.按位异或：  ^       两个相应位相同，则结果为0
		异或操作可以在不借助三方变量的情况，互换两个变量的值(两个变量连续异或三次)
			a=5,b=6;  a=a^b,b=a^b,a=a^b;
		
三目(元)运算符
	语法：
		表达式1 ? 表达式2 : 表达式3     #可以嵌套，表达式1 ? 表达式2 : 表达式3 ? 表达式4 : 表达式5; 
	使用：
		1.判断表达式1的结果(得到布尔值)
		2.表达式结果为1/true,执行表达式2，否则执行表达式3
		


流程控制：
	控制代码的执行顺序
	流程控制语句：
		1.顺序结构：代码自上至下一行一行执行
		2.选择结构(分支)
		3.循环结构
		
	选择结构：根据条件判断的结果选择执行某一段代码		
		if流程控制：参考百度
			1.单分支
				if(条件表达式){
					语句;
				}
			注意：
				1.{}可以省略，省略之后只控制(真则执行)接下来第一条语句 以;辨别
				2.条件表达式判断结果必须是bool值
				3. 0/null/""/undefined为假
			
			2.双分支
				if(条件表达式){
					语句;
				}else{
					语句;
				}
			
			
			3.多分支
				if(条件表达式1){
					语句;
				}else if(条件表达式2){
					语句;
				...
				else{ 
				
					语句;
				}
			
			4.switch：只进行值的比较
			switch(条件表达式){
				case 常量1:
					语句; break; 
				case 常量2:
					语句; break;
				…
				case 常量n:
					语句; break;
				default:
					语句;
			}
			注意：
				1.switch一般用于值的匹配，()中表示的是值
				2.case可以有多个，匹配成功，执行:之后的语句
				3.break用于跳出匹配，不再向下匹配，如果省略了，会从当前匹配到的case开始，依次执行所有的语句(可实现累加)
				4.default可以省略，表示所有case匹配失败后默认执行的语句
				5.case可以共用代码
					case 常量1：
					case 常量2：
						语句
	
		5.for循环：1.循环变量 2.循环条件 2.循环体
		for(循环初值;循环条件;步长){
			语句; //循环体
		}
			1.continue：
			2.break
		
		6.while循环
		while(循环条件){
			语句; //循环体
		}
		先判断，再执行
		
		7.do while循环
		do{
			语句;//循环体
		}while(循环条件);
		先执行，再判断



		



05： 其他内置对象 BOM 

1.函数
	1.函数就是一段待执行的代码段
	2.函数可以实现功能的封装，可以实现代码的复用
	3.函数使用：
		1.函数声明
		2.函数调用
	4.语法：
		1.函数声明
			1.使用function关键字进行函数的声明
				function 函数名 (参数列表){
					函数体
					return；
				}
			2.函数名自定义，普通函数的函数名尽量使用小写或者小驼峰
			3.参数列表，函数体执行所需的数据
			4.函数体就是待执行的代码段
			5.return表示返回，将函数执行的结果返回给外界，只能返回一个值，return之后的代码不执行
		2.函数调用
			1.语法：函数名(参数列表);
			  注意：函数存在返回值，需要定义变量接收
			2.函数先声明后调用(非强制)
			3.参数传递：
				形参：函数声明时定义的参数列表
				实参：函数调用时给出的参数
			4.函数可以声明多个参数，使用,隔开
			5.形参和实参个数不匹配不会报错
			6.匿名函数
				省略函数名的函数
				语法：	
					1. var f4 = function(){}
					2.匿名函数自执行
						function(){}();
2.变量作用域
	1.变量起作用的范围
	2.分类：
		1.全局作用域：全局变量，整个程序的任何地方都可以访问和调用
			1.函数外部创建的
			2.省略var关键字创建的变量
		2.局部作用域(函数作用域)
			在函数体内部起作用的变量，称局部变量
			函数体的{}就是局部变量
			使用：
				函数体内使用var定义的变量，函数外界无法访问
		3.作用域查找：就近原则，由里往外查找
			

3.数组
帮助文档：http://www.runoob.com
数组对象是使用单独的变量名来存储一系列的值。有序的元素序列
	在一个数组中你可以有不同的对象,一个数组中包含对象元素、函数、数组
	赋值：
		1.var arr1 = []
		2.var myCars=new Array(); 
		  myCars[0]="Saab";       
		  myCars[1]="Volvo";
		  ...
		3.var myCars=new Array("Saab","Volvo","BMW");
	
	初始化数组长度:给一个数字代表长度
		var arr6 = new Array(5); 
	
	使用"数组名[index]"的方式操作数组元素
		访问：var name0=myCars[0];
		重新赋值：myCars[0]="Opel";
	数组是对象类型
		对象由属性和方法组成的
		通过点语法访问对象的属性和方法
		var x=myCars.length             // myCars 中元素的数量
		var y=myCars.indexOf("Volvo")   // "Volvo" 值的索引值
	遍历数组：
		循环输出数组元素
			for(var i=0;i<=arr.length-1;i++){
				console.log(arr[i]);
			}
数组方法
	1.常用API
		toString()    将数组内容转换为字符串并返回
		join()        将数组中元素拼接成一个字符串并返回，可以指定数组元素之间的连接符，默认以逗号隔开
		reverse()     反转数组元素，倒叙重新排列元素，返回反转后的数组，是直接对原始数组进行反转
		sort()        对原始数组内容进行排序，返回排序后数组，默认按unicode编码升序排列
		push(data)    表示在数组的末尾追加原始，参数：可以是一个/多个(多个参数之间使用逗号隔开)  返回值：返回新数组的长度
		pop()         表示删除最后一个元素  返回值：返回被删除的原始
					  数组的存储结构：数组在内存中使用栈结构存储，先进后出(入栈操作)
		unshift(data) 向数组的头部添加元素，参数：可以是一个元素，也可以是多个元素   返回值：返回添加元素之后的数组长度
		shift()       删除数组的头部元素,返回值：返回被删除的元素
二维数组：
	数组中的每一个元素都是一个小数组
		

JS的内置对象(数组就是一个内置对象)
	1.对象：
		对象由属性和方法组成，可以使用点语法访问对象的属性和方法
	2.对象分类：
		1.内置对象：
			由ECMAScript规定，例如数组，字符串 Math Date...
		2.BOM对象：
			浏览器对象模型，由浏览器各大厂商指定，提供一系列与浏览器操作相关的对象
		3.DOM对象：
			文档对象模型，提供一系列规范的操作文档的对象
		4.自定义对象





06： DOM JS事件 

	 内置对象分类：
		1.string对象	
			1.英文字母大小写转换
				toUpperCase()
				roLowerCase()
			2.获取字符或字符编码
				1.获取指定位置字符
					charAt(index);
				2.获取指定位置的字符对应的编码
					charCodeAt(index);
			3.检查字符串
				indexOf(value[,fromIndex])
					作用：获取指定字符的下标     返回值：返回value第一次出现的下标位置，查找失败返回-1
				lstIndexOf(value[,fromIndex])     最后出现的下标位置
			4.截取字符串
				substring(startIndex，endIndex)   根据下标截取字符串
			5.分割字符串
				split(param)  参数：指定分割符   返回值：返回数组，存放分割完成的字符串
			6.模式匹配
				1.匹配正则表达式实现查找和替换字符串的作用
				2.正则表达式
					语法：/正则格式/修饰符 即 reg1 = new RegExp('正则格式','修饰符')
					修饰符：
						i:ignorecase  忽略大小写
						g:global      全局匹配
				3.字符串方法：
					1.replace(substr/RegExp,newStr)
						根据给出的substr或RegExp查找对应字符串，并将其替换为newStr						
					2.match（substr/RegExp）
						根据指定的substr或RegExp匹配对应字符串返回数组，数组中存放匹配结果
					属性：
						lastIndex：可读可写，表示下一次匹配的起始索引
							默认情况，正则表达式对象不能重复调用方法，重复调用会报错(不能保证下标从0开始)
							只有正则对象设置全局匹配g，该属性才会起作用
					方法：	
						test() 验证字符串中是否存在满足正则匹配模式内容，存在返回true，不存在返回false
		Math对象
			1.提供一些数学运算的方法
			2.属性：	
				1.元素率：Math.PI/180°
				2.自然对数：Math.E
			3.方法：	
				1.三角函数
					Math.sin(x)  Math.cos(x)  Math.tan(x)
				2.角度换算
					Math.PI/180 : 表示1°
				3.计算函数
					Math.sqrt(x)  表示对x开平方
					Math.log(x)   求对数
					Math.pwo(x,y) x的y次方
					Math.abs      绝对值
					Math.max()	  最大
					Math.min()    最小
					Math.random() 0~1的之间随机数
					Math.ceil(x)  向上取整
					Math.floor(x) 向下取整
					Math.round()  四舍五入

		Date对象
			1.提供操作日期和事件的方法
			2.创建Date对象
				1.var date1 = new Date()   获取当前事件
				2.创建指定日期的对象
					var date2 = new Date("时间")
				3.方法
					1.读取或设置当前时间的毫秒数
						1.getTime()
							会返回当前日期时间离元年之间间隔的毫秒数
						2.setTime(s)
							根据指定的毫秒数s,计算日期
					2.获取时间分量
						getFullYear()
						获取当前日期对象中四位的年份信息
						getMonth()
						获取当前日期对象中月份信息
						getDate() 天数
						getDay()  星期数
						getHours() 小时数
						getMinutes()分钟数
						getSeconds()秒数
						getMilliseconds()毫秒数



2-02：30






















07： jQuery介绍 jQuery选择器 jQuery操作DOM 















08： jQuery-事件 jQuery动画 插件 - Echarts 

















