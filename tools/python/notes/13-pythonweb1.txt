

01： Flask 框架 开发环境建立 模板 

1.基本知识点
	1.静态网页和动态网页
		1.静态网页：不与服务器动态交互的网页
		2.动态网页：允许与服务器做动态交互的
		
	2.服务器：给用户提供服务的机器称为服务器
	
	3.web服务器
		作用：
			1.存储web上的信息
			2.能够接受用户的请求(request)并给出响应(response)
			3.执行服务器端程序
			4.具备一定的安全功能
			
	4.框架	
		框架是一个为了解决开放性问题而存在一种程序结构，框架本身提供了一些最基本的功能。
		
	5.python web框架
		1.Flask       轻量级
		2.Webpy		  轻量级
		3.Tornado	  异步框架
		4.Django	  重量级框架
		
	6.框架模式
		1.MTV
			Models	   	 模型层，主要负责数据库建模
			Templates	 模板层，用于处理用户的显示内容，如html
			Views 		 视图，处理与用户打交道的内容(请求和响应)
		2.MVC
			Models  	 模型层，主要负责数据库建模
			Views   	 视图，处理用户的显示内容
			Controller   控制器，用户与用户交互的部分内容(请求和响应)
	7.Flask是一个基于Python并且依赖于Jinja2模板引擎和Werkzeug WSGI服务的一个微型框架
		WSGI：Web Server Gateway Interface(web服务器服务网关接口)
		Flask是采用MTV的框架模式
	
2.安装Flask
	1.查看已安装的Flask版本
		1.安装Flask
			pip3 install flask
		2.import flask
			flask.__version__
	2.Flask - 路由(route)
		1.客户端发送请求给web服务器，web服务器再将请求发给Flask程序实例
			程序实例需要知道每个url请求所对应的运行代码是谁。所以程序中必须创建一个url请求地址，到python运行函数的一个映射，处理url和函数之间的关系的程序就是路由
		2.路由表示
			@app.route('/')
		3.带参数的路由
			路由中可以携带参数表示不同数据
			1.基本带参路由
				@app.route('/show/<name>')
				def show(name):
					return 'xxx'
			2.带多个参数的路由
				@app.route('/show/<name>/<age>')
				def show(name,age):
					return 'xxx'
			3.指定参数类型的路由
				@app.route('/show/<name>/<int:age>')
				def show(name,age)
				
				Flask中所支持的类型转换器
					类型转换器		作用
					缺省			字符串，不能有斜杆('/')
					int:			整型
					float:			浮点型
					path:			字符串,可以有斜杠
					
			4.多url的路由匹配
				@app.route('地址1')
				@app.route('地址2')
				...
				def show(name,age):
			
			5.路由中设置HTTP请求方法
				Flask路由也允许设置对应的请求方法(post/get),只有将匹配上请求方法的路径才能交给对应的视图处理函数去处理，所有的路由，默认只接受get请求
				@app.route('/',methods=['get','post'])
			6.url的反向解析
				正向解析：程序自动解析，根据@app.route()中的访问路径，来匹配处理函数
				反向解析：通过视图处理的函数的名称自动生成对应的访问路径
				在Flask中实现反向解析:
					url_for(funName,args)
						funName:要生成地址的函数名
						args:该地址中需要的函数
		
		
2-03:30		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

02： WEB 表单 数据库 



03： 项目结构 用户管理 分页 




04： 国际化与本地化、测试、项目部署 测试 项目部署