

如果是默认非自定义的，只能通过IP通信。
bridge  host  macvlan  overlay

Bridge：相同网络可以通讯，不同网络不能通讯
docker network create my-net
docker network ls
docker network inspect my_bridge
docker network rm my-net
创建网络时，可以指定-ipv6标志来启用ipv6。
cat daemon.json        一旦配置ipv6，则无法选择性关闭
{
  "bip": "192.168.1.5/24",
  "fixed-cidr": "192.168.1.5/25",
  "fixed-cidr-v6": "2001:db8::/64",
  "mtu": 1500,
  "default-gateway": "10.20.1.1",
  "default-gateway-v6": "2001:db8:abcd::89",
  "dns": ["10.20.1.2","10.20.1.3"]
}

docker create --name my-nginx --network my-net --publish 8080:80 nginx:latest
docker network connect my-net my-nginx
docker network disconnect my-net my-nginx


Overlay：分布式网络
如果是初始化swarm，会自动创建docker_gwbridge(负责dockerd间通讯,存在主机内核上)和ingress(overlay类型)两个网络
docker network create -d overlay [--attachable单独容器通讯] [--opt encrypted加密通讯,但影响性能] my-attachable-overlay
docker network rm ingress 如果不存在入口网络，会影响端口发布和负载均衡
docker network create \                       
  --driver overlay \
  --ingress \
  --subnet=10.11.0.0/16 \
  --gateway=10.11.0.2 \
  --opt com.docker.network.driver.mtu=1200 \
  my-ingress

Customize the docker_gwbridge interface
1.stop docker
2.delete the existing docker_gwbridge interface 
    ip link set docker_gwbridge down
    ip link del dev docker_gwbridge
3.Start Docker.
4.docker network create \
  --subnet 10.11.0.0/16 \
  --opt com.docker.network.bridge.name=docker_gwbridge \
  --opt com.docker.network.bridge.enable_icc=false \
  --opt com.docker.network.bridge.enable_ip_masquerade=true \
  docker_gwbridge
Publish ports on an overlay network
  using the -p or --publish flag on docker service create or docker service update  
Bypass the routing mesh for a swarm service
  --mode global    --endpoint-mode flag to dnsrr   
Separate control and data traffic
  --advertise-addr and --datapath-addr
  

Host：如果服务容器绑定了80端口，相当于进程直接在主机上运行，这是其它方面是隔离的
docker container create --network host

Macvlan：
  docker network create -d macvlan  \
  --subnet=192.168.32.0/24  \
  --ip-range=192.168.32.128/25 \
  --gateway=192.168.32.254  \
  --aux-address="my-router=192.168.32.129" \
  -o parent=eth0 macnet32

禁用一个容器的网络：删除容器会删除网络
  docker run --rm -dit \
  --network none \
  --name no-net-alpine \
  alpine:latest \
  ash


docker run --rm -d --network host --name my_nginx nginx  ---  --rm means Automatically remove the container when it exits


overlay：swarm
Use the default overlay network
  1.docker swarm init --advertise-addr=<IP-ADDRESS-OF-MANAGER>
  2.docker swarm join --token <TOKEN> --advertise-addr <IP-ADDRESS-OF-WORKER-1> <IP-ADDRESS-OF-MANAGER>:2377
  3.docker node ls  / docker node ls --filter role=manager
  4.docker network ls   (The docker_gwbridge connects the ingress network to the Docker host’s network interface so that traffic can flow to and from swarm managers and workers)
Use a user-defined overlay network：
  1.docker network create -d overlay nginx-net   (manager：worker会自动创建该网络)         
  2.docker service create \                      (manager:All of the service task containers can communicate with each other without opening any ports.)    
    --name my-nginx \
    --publish target=80,published=80 [mode=host] \    如果使用host模式，副本集也要改
    --replicas=5 [/--mode global]\
    --network nginx-net \
    nginx
  1.docker network create -d overlay nginx-net-2
  2.docker service update \
    --network-add nginx-net-2 \
    --network-rm nginx-net \
    my-nginx
删除服务与网络：
docker service rm my-nginx 
docker network rm nginx-net nginx-net-2

Use an overlay network for standalone containers
1.docker swarm init  (host1)
2.docker swarm join --token SWMTKN-1-3s9fdqc7mc73z8aaucxrhwd6lerq3283asuwe7fdfv88xuerru-cyscavkonox925ig9sbduw12z 192.168.126.133:2377(host2)  
3.docker network create --driver=overlay --attachable test-net(host1)  
4.docker run -it --name alpine1 --network test-net alpine(host1)  
5.docker network ls(host1)   docker network ls (host2) 
6.docker run -dit --name alpine2 --network test-net alpine(host2)  
7.docker network ls(host2)  
8.docker run -it --rm --name alpine3 --network test-net alpine  
9.docker container stop alpine2   docker container rm alpine1   docker network rm test-net
  
  
Macvlan：  
1.docker network create -d macvlan \
  --subnet=172.16.86.0/24 \
  --gateway=172.16.86.1 \
  -o parent=eth0 \
  my-macvlan-net  
2.docker run --rm -itd \
  --network my-macvlan-net \
  --name my-macvlan-alpine \
  alpine:latest \
  ash  
3.docker container inspect my-macvlan-alpine
4.docker exec my-macvlan-alpine ip addr show eth0 &&  docker exec my-macvlan-alpine ip route
IEEE 802.1q以及VLAN Tagging属于互联网下IEEE 802.1的标准规范，允许多个网桥(Bridge)在信息不被外泄的情况下公开的共享同一个实体网上。IEEE 802.1q-英文缩写写为dot1q，经常在实现以太网封装协议的架构下被提及。  
802.1q trunked bridge example : 没啥不一样的
1.docker network create -d macvlan \
  --subnet=172.16.86.0/24 \
  --gateway=172.16.86.1 \
  -o parent=eth0.10 \
  my-8021q-macvlan-net
2.docker run --rm -itd \
  --network my-8021q-macvlan-net \
  --name my-second-macvlan-alpine \
  alpine:latest \
  ash





















 